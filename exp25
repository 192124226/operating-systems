-------
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int file_descriptor = open("example.txt", O_RDONLY);
    if (file_descriptor == -1) {
        perror("open");
        return 1;
    }

    int flags = fcntl(file_descriptor, F_GETFL, 0);
    if (flags == -1) {
        perror("fcntl");
        return 1;
    }

    if (flags & O_RDONLY) {
        printf("The file is open for reading.\n");
    }

    close(file_descriptor);
    return 0;
}
-----------------
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int file_descriptor = open("example.txt", O_RDONLY);
    if (file_descriptor == -1) {
        perror("open");
        return 1;
    }

    off_t offset = lseek(file_descriptor, 0, SEEK_END);
    if (offset == -1) {
        perror("lseek");
        return 1;
    }

    printf("File size: %ld bytes\n", (long)offset);

    close(file_descriptor);
    return 0;
}
-------------------------------------------------------
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>

int main() {
    const char *file_name = "example.txt";
    struct stat file_info;

    if (stat(file_name, &file_info) == -1) {
        perror("stat");
        return 1;
    }

    printf("File size: %ld bytes\n", (long)file_info.st_size);
    printf("File permissions: %o\n", file_info.st_mode & 0777);

    return 0;
}
