#include <stdio.h>
#include <stdlib.h>

#define MAX_REQUESTS 100
#define MAX_CYLINDERS 200

// Function to sort an array using the bubble sort algorithm
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to simulate SCAN disk scheduling
void scan(int requestQueue[], int n, int head) {
    int seekTime = 0;
    int direction = 1; // 1 for moving towards the outer edge, -1 for moving towards the inner edge
    int currentIndex = 0;
    int* sortedRequests = (int*)malloc(n * sizeof(int));

    if (sortedRequests == NULL) {
        printf("Memory allocation error!\n");
        exit(1);
    }

    for (int i = 0; i < n; i++) {
        sortedRequests[i] = requestQueue[i];
    }

    // Sort the request queue
    bubbleSort(sortedRequests, n);

    // Find the index where the head is located
    for (int i = 0; i < n; i++) {
        if (sortedRequests[i] >= head) {
            currentIndex = i;
            break;
        }
    }

    printf("SCAN Order: ");

    // While moving towards the outer edge
    for (int i = currentIndex; i < n && i >= 0; i += direction) {
        printf("%d ", sortedRequests[i]);
        seekTime += abs(head - sortedRequests[i]);
        head = sortedRequests[i];
    }

    // Change direction and move towards the inner edge
    direction = -direction;

    // Continue scanning in the opposite direction
    for (int i = currentIndex + direction; i >= 0 && i < n; i += direction) {
        printf("%d ", sortedRequests[i]);
        seekTime += abs(head - sortedRequests[i]);
        head = sortedRequests[i];
    }

    printf("\nTotal Seek Time: %d\n", seekTime);

    free(sortedRequests);
}

int main() {
    int requestQueue[MAX_REQUESTS];
    int n, head;

    printf("Enter the number of requests: ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX_REQUESTS) {
        printf("Invalid number of requests.\n");
        return 1;
    }

    printf("Enter the current position of the disk arm: ");
    scanf("%d", &head);

    if (head < 0 || head > MAX_CYLINDERS) {
        printf("Invalid disk arm position.\n");
        return 1;
    }

    printf("Enter the disk queue requests:\n");

    for (int i = 0; i < n; i++) {
        scanf("%d", &requestQueue[i]);
        if (requestQueue[i] < 0 || requestQueue[i] > MAX_CYLINDERS) {
            printf("Invalid request.\n");
            return 1;
        }
    }

    scan(requestQueue, n, head);

    return 0;
}
------------------------------o/p--------------
Enter the number of requests: 4
Enter the current position of the disk arm: 56
Enter the disk queue requests:
23
45
56
78
SCAN Order: 56 78 45 23
Total Seek Time: 77
